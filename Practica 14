x1 <- c(0,20,0,20,40,0,5,10,15,20,0,0,0,0,20,20,20,20)
length(x1)
x2 <- c(0,0,1,1,1,5,5,5,5,5,0,1,3,5,0,1,3,5)
length(x2)
y <- c(6.1,7.5,6.2,7.6,8.6,6.1,6.4,6.7,6.9,7.2,6.1,6.2,6.1,6.1,7.5,7.6,7.2,7.2)

modelo <- lm(y~x1+x2)
summary(modelo)
names(modelo)
##Nos da los coeficientes de las betas y Ygorro##
modelo$coefficients
##Nos da los residuos de la y vs la y estimada##
modelo$residuals
##Valores de las yestimadas(Predict)##
modelo$fitted.values

valores <- predict(modelo)
valores

# Realizar una estimación puntual cuando se tiene una X1 = 20, X2 = 1
yest <- ((modelo$coefficients[1])*1) + ((modelo$coefficients[2])*20) + ((modelo$coefficients[3])*1)
yest
summary(yest)

# Para obtener el estadístico F
f <- (0.9838/2)/((1-0.9838)/(18-(2+1)))
f

# Revisando el p-value del estadístico F podemos decir que la Ho debe ser rechazada por lo que se concluye que hay una relación
# lineal útil entre Y y al menos una de las dos variables independientes, es importante señalar que esto no significa que
# las dos variables independientes sean útiles.
# F tiene que ver con todo el modelo y dice si es significativo aún si dentro hay variables que no lo sean.

# Como los p-value de todas las variables independientes son menos a 0.05 concluimos que son estadísticamente significativas dentro
# del modelo y pueden explicar a Y en un 98.17%.

##El t es n-(k+1)=15##

t <- qt(p=0.95+(0.05/2),df=15,lower.tail = TRUE)
t


# Para la desviación estandar de y, mediante Rregresion simple##
residuos <- y - valores
residuos
cuadrados <- (residuos)^2
cuadrados
sse <- sum(cuadrados)
sse
varianza <- sse/(18-(2+1))
varianza
desvest <- (varianza)^(1/2)
desvest
s2<-(0.100051)^2
s2
# Para la desviación estandar de y estimada
sy <-0.0332

# Intervalo de confianza para B1
min <- modelo$coefficients[2] - t * 0.002099
min
max <- modelo$coefficients[2] + t * 0.002099
max

# Intervalo de confianza cuando X1 = 20, X2 = 1
min1 <- yest - t * sy
min1
max1 <- yest + t * sy
max1

# Intervalo de predicción cuando X1 = 20, X2 = 1
min2 <- yest - t * ((desvest)^2+(sy)^2)^(1/2)
min2
max2 <- yest + t * ((desvest)^2+(sy)^2)^(1/2)
max2

confint(modelo, 'x1', level = 0.95)
confint(modelo, 'x2', level = 0.95)

confint(modelo, level = 0.95)

predict(object = modelo, newdata = data.frame(x1=c(20),x2=c(1)),interval = "confidence", level = 0.95)
predict(object = modelo, newdata = data.frame(x1=c(20),x2=c(1)),interval = "prediction", level = 0.95)
